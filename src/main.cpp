#include "ppo.h"

#include <chrono>
#include <iostream>
#include <numeric>
#include <random>
#include <vector>
#include <cassert>

int run(const unsigned seed)
{
	const auto dMin = 0.85;
	const auto rC = 3; // 0.67;
	const auto areaDeltaMax = -1;

	const auto nPoints = 300;
	const auto coordinatesPerPoint = 2;
	std::vector<double> outMatrix(nPoints * coordinatesPerPoint * 2);

	const auto initType = 0;
	const auto aspectRatio = 1.0;

	//optimizePattern(dMin, rC, areaDeltaMax, nPoints, initType, outMatrix, aspectRatio);

	std::default_random_engine re(seed);
	const auto randX = std::uniform_real_distribution<double>(0, 1);
	std::vector<double> points(nPoints * coordinatesPerPoint);
	for (auto i = 0; i < nPoints * coordinatesPerPoint; ++i)
	{
		points[i] = randX(re);
	}
	//optimizePattern(dMin, rC, areaDeltaMax, nPoints, points, outMatrix, aspectRatio);

	std::vector<double> points2(nPoints * coordinatesPerPoint);
	for (auto i = 0; i < nPoints * coordinatesPerPoint; ++i)
	{
		points2[i] = randX(re);
	}
	
	return optimizePattern(dMin, rC, areaDeltaMax, nPoints, points.data(), points2.data(), outMatrix.data(), aspectRatio);
}

int matlabFailingCase()
{
	const auto dMin = 0.6944444444444444;
	const auto rC = 1.3888888888888888;
	const auto areaDeltaMax = -1;

	const auto aspectRatio = 7.3131034097352607;

	std::vector<double> points{ 0.1924500897298753, 0.6445020685900573, 0.4803592581593663, 0.3849001794597506, 1.0521705487764434, 0.7698003589195012, 0.7471482347724013, 1.0735182874007214, 1.3471506281091270, 1.2101058885432254, 1.5467009865738206, 1.6823198905635390, 1.5626789172438418, 1.8952702832727213, 2.1245842572949423, 1.9245008972987527, 2.5018511664883789, 2.2938786700206015, 2.1270795459053016, 2.8783214158428563, 2.6805814755943578, 2.5182813245627766, 3.4641016151377548, 3.2716515254078797, 3.2467015894740325, 3.3242926560654924, 3.6565517048676304, 3.5203703378600735, 3.8558604197305288, 3.9316933827292999, 3.8778690588646390, 4.1856144076356214, 4.4934368072802320, 4.1227820442732686, 4.4263520637871316, 4.9101865993676403, 4.5083155784065978, 4.8763551772004812, 5.1212183779670157, 5.0179659342881742, 5.4620040357104953, 5.4480111291237865, 5.3641744189722003, 5.7555245701016604, 5.8149878795280650, 5.7735026918962582, 6.2151072998395023, 6.0747401974028437, 6.1425760667275044, 6.3508529610858835, 6.5757491359284126, 6.4832930881529283, 7.2487000855549555, 6.9902632866812189, 6.8136610055256730, 7.3131034097352607, 7.3131034097352607, 0.5555555555555556, 0.3291467654464599, 0.5444961078128173, 0.7777777777777777, 0.2794316865761499, 0.4444444444444445, 0.9099634605176414, 0.0793081333327712, 0.1111111111111111, 0.5499085860318218, 0.0852244570942165, 0.2217780244084651, 0.4946771816561603, 0.0989439772248031, 0.2838075587576396, 0.4444444444444445, 0.1111111111111111, 0.5739602237788318, 0.8973356109920655, 0.3793716777910361, 0.7573428667766727, 0.9722411141768583, 0.3139548940485746, 0.7022881218329338, 0.9881866012167704, 0.1415034820667299, 0.5555555555555556, 0.5734520654749772, 0.3593919016849281, 0.5555777912188944, 0.9931085558418027, 0.1227117154160976, 0.4589259062492582, 0.5841261085429582, 0.0661816358617190, 0.4493985869709051, 0.7378909838525141, 0.0665231844351015, 0.3490788048024523, 0.6831882628325798, 0.3172318969610539, 0.7209855302896400, 0.8880161901651601, 0.1504613893820307, 0.4009480157682735, 0.4444444444444445, 0.2905055119930111, 0.6168307183832332, 0.9770360527434980, 0.0016133725936437, 0.2602598296629679, 0.5811821720622512, 0.3942506515149459, 0.5847649353575255, 0.9031713946489175, 0.8888888888888890, 0.7777777777777777 };
	std::vector<double> points2{ 0.2383777220772631, 0.0360731079916763, 0.4234412273761365, 0.4437873214406787, 0.2429342407274329, 0.7045096861817085, 0.9622504486493764, 0.9537728381169063, 1.1592066509187848, 1.3134435662022668, 1.2119679172436684, 1.7075841826533167, 1.7160266851174757, 1.5396007178390023, 2.0067061947217142, 1.9245008972987527, 2.0808093560868306, 2.5018511664883789, 2.4905286740483850, 2.1981741790602274, 2.6275899222896721, 2.7854058267718629, 2.6745880967024713, 2.9884253656525250, 3.4224949698173028, 3.1506764948415964, 3.4966802516324602, 3.5689585778041431, 3.4895054059460029, 3.9481462130797178, 3.9237261165207649, 4.0136357639600746, 4.4263520637871316, 4.1999231571964035, 4.3935732263863772, 4.7738477438147449, 4.7496533102806291, 4.6188021535170067, 5.1032199704643473, 5.1305350015960398, 4.9288225539564268, 5.5643431275684154, 5.3886025124365080, 5.3830202093958475, 5.8066475770207395, 5.9879237543000743, 5.6088155334947514, 6.0836810108558934, 6.3998148116744122, 6.0012360007126331, 6.5433030508157595, 6.7357531405456355, 6.4942552722432518, 7.1499400053206097, 6.9734795859714369, 6.9962140909300796, 7.2839678002528334, 0.4962066019564918, 0.9079691318851639, 0.2719695629703004, 0.6402083964929232, 0.9960597867786142, 0.1584511913341680, 0.1111111111111111, 0.7062049156734409, 0.0145410057511963, 0.3131671293941519, 0.6702073097668305, 0.0918319161316673, 0.3860672777946738, 0.8888888888888890, 0.4486707926957271, 0.8888888888888890, 0.9946176625107547, 0.5555555555555556, 0.6481925998260862, 0.9999184187169309, 0.1837064156205566, 0.2670997308202731, 0.5963153272931490, 0.1178616465904698, 0.4219388150186227, 0.7382047835986972, 0.2550813963821826, 0.6003424337935187, 0.9472451831444629, 0.0437732739606895, 0.2766339168614991, 0.5788650313555763, 0.1111111111111111, 0.8446069720312710, 0.9214348839865114, 0.4862907394857278, 0.7145365734550528, 0.7777777777777777, 0.0393274338300186, 0.4674656748985708, 0.6526649014693157, 0.4247401023325391, 0.4444444444444445, 0.9986926592849058, 0.0700310692611523, 0.3250529577786521, 0.5395266196796292, 0.0245478856866055, 0.4029273388643204, 0.5661244175967330, 0.2222222222222223, 0.1111111111111111, 0.5863578579231544, 0.3309110671011349, 0.6417077396381491, 0.9351607054841579, 0.7275926485933688 };
	
	assert(points.size() == points2.size());
	const auto nPoints = points.size() / 2;
	std::vector<double> outMatrix(nPoints * 2);

	return optimizePattern(dMin, rC, areaDeltaMax, nPoints, points.data(), points2.data(), outMatrix.data(), aspectRatio);
}


template<typename T>
void printMinMeanMax(std::vector<T>& v, const std::string& valueName)
{
	if (v.empty())
	{
		std::cerr << "Warning: Cant' determine min max and mean of empty vector" << std::endl;
		return;
	}
	
	auto mean = std::accumulate(v.begin(), v.end(), 0) / v.size();
	auto [min, max] = std::minmax_element(v.begin(), v.end());

	std::cout << valueName << " (min): " << *min << '\n';
	std::cout << valueName << " (mean): " << mean << '\n';
	std::cout << valueName << " (max): " << *max << std::endl;
}

void testStatistics(const int n)
{
	std::vector<long long> timesMilliseconds(n);
	
	std::vector<int> iterations(n);
	
	for (auto i = 0; i < n; ++i)
	{
		auto startTime = std::chrono::steady_clock::now();
		iterations[i] = run(i);
		auto endTime = std::chrono::steady_clock::now();
		timesMilliseconds[i] = std::chrono::duration_cast<std::chrono::milliseconds>(endTime - startTime).count();
	}

	printMinMeanMax(iterations, "Iterations");
	printMinMeanMax(timesMilliseconds, "Time [ms]");
}

int main()
{
	matlabFailingCase();
	//testStatistics(10);
}
